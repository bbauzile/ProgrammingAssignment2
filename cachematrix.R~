## Function here would calculate the inverse of a matrix by trying to get the
## the cached result first if available. If not it would solve it.

## This function would calculate the inverse of matrix by first checking to see
## if it was already been calculated. 

makeCacheMatrix <- function(a = matrix()){
	x <- NULL
	set <- function(y){
	    a <<- y
	    x <<- NULL
}
get <- function() a
setmatrix <- function(solve) x <<- solve
getsolve <- function() x
list(set = set, get = get,
	 setmatrix = setmatrix,
	 getmatrix = getmatrix)
}

## Here, the function would determine how R read the cached for the answer and
## what to print if it is not there
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(a, ...) {
	x <- a$getmatrix()
	if(!is.null(x)){
		message("getting cached data")
		return(x)
	}
	data <- a$get()
	x <- solve(matrix, ...)
	a$setmatrix(x)
	x   

}
